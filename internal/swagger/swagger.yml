openapi: 3.0.3
info:
  title: Golang REST API
  description: |-
    This is a sample REST API written in Golang.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: post
    description: Blog post
  - name: tag
    description: Tag of posts
  - name: user
    description: Operations about user
paths:
  /posts:
    get:
      tags:
        - post
      summary: Get exisiting posts
      description: Get posts
      operationId: getPosts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
    post:
      tags:
        - post
      summary: Create a new post
      operationId: addPost
      requestBody:
        description: Create a new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /posts/{id}:
    get:
      tags:
        - post
      summary: Get exisiting posts
      description: Get posts
      operationId: getPost
      parameters:
        - name: id
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
        '422':
          description: Validation exception
    patch:
      tags:
        - post
      summary: Update a post
      operationId: updatePost
      parameters:
        - name: id
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    delete:
      tags:
        - post
      summary: Delete a post
      operationId: deletePost
      parameters:
        - name: id
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /users/current:
    get:
      tags:
        - user
      summary: Get current user
      description: ''
      operationId: getCurrentUser
      parameters: []
      responses:
        default:
          description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        user_id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: theTitle
        content:
          type: string
          example: theContent
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00Z
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        user:
          type: object
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00Z
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        slug:
          type: string
          example: programming
        name:
          type: string
          example: Programming
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00Z
      xml:
        name: tag
    PostBody:
      type: object
      properties:
        title:
          type: string
          example: theTitle
        content:
          type: string
          example: theContent
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagBody'
      xml:
        name: post
    TagBody:
      type: object
      properties:
        name:
          type: string
          example: theTitle
        slug:
          type: string
          example: theContent
      xml:
        name: tag
